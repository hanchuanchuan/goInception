package main

import (
	"os"
	"sort"
	"text/template"

	"github.com/hanchuanchuan/goInception/session"
)

type ErrorLevel struct {
	OptionName string
	Level      uint8
	TomlValue  string
}

const tmpl = `
// Code generated by make level. DO NOT EDIT.

package config

type IncLevel struct {
{{ range $opt := . }}` + "	{{ $opt.OptionName }} uint8 `toml:\"{{ $opt.TomlValue }}\"`" +
	`
{{ end }}}

var defaultLevel = IncLevel {
{{ range $opt := . }}	{{ $opt.OptionName }}: {{ $opt.Level }},
{{ end }}}
`

const defaultToml = `
[inc_level]
{{ range $opt := . }}{{ $opt.TomlValue }} = {{ $opt.Level }}
{{ end }}
`

func GenerateLevels() []ErrorLevel {
	results := make([]ErrorLevel, 0, len(session.ErrorsDefault))
	for e := range session.ErrorsDefault {
		if e <= session.ErrorCode(session.ER_ERROR_FIRST) ||
			e >= session.ErrorCode(session.ER_ERROR_LAST) {
			continue
		}
		name := e.String()
		if name == "" {
			continue
		}
		results = append(results, ErrorLevel{
			OptionName: session.ToCamel(name),
			Level:      session.GetErrorLevel(e),
			TomlValue:  name,
		})
	}
	sort.SliceStable(results, func(i, j int) bool {
		return results[i].TomlValue < results[j].TomlValue
	})
	return results
}

func main() {
	t := template.Must(template.New("tmpl").Parse(tmpl))
	file, err := os.OpenFile("config/error_level.go", os.O_TRUNC|os.O_RDWR|os.O_CREATE, 0600)
	if err != nil {
		panic(err)
	}
	err = t.Execute(file, GenerateLevels())
	if err != nil {
		panic(err)
	}
	file.Close()

	t = template.Must(template.New("toml_default").Parse(defaultToml))
	file, err = os.OpenFile("config/config.toml.default.tmp", os.O_TRUNC|os.O_RDWR|os.O_CREATE, 0600)
	if err != nil {
		panic(err)
	}
	defer file.Close()
	err = t.Execute(file, GenerateLevels())
	if err != nil {
		panic(err)
	}
}
